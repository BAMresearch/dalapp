<!DOCTYPE html><html><head><meta charset="UTF-8">
<title>{{siteTitle}} {{appTitle}}</title>
<script type="text/javascript" src="{{proxyURL}}/openbis/webapp/eln-lims/lib/jquery/js/jquery-1.11.3.min.js"></script>
<!-- https://github.com/davidshimjs/qrcodejs -->
<script>{{qrcode}}</script>
<style>
html, body { height: 100%; margin-top: 0; margin-bottom: 0; }
body { background-color: #f2f2f2; }
#intro img { float: right; height: 80px; margin: 10px; }
#main { display: none; width: 50%; }
#main textarea { overflow-y: scroll; width: 100%; min-height: 6em; }
p.error-text { color: red; display: none; }
a { text-decoration: none; color: darkblue; }
#button-group {
    margin: 10px 0;
    display: flex;
    flex-direction: row;
    min-width: 100%;}
#footer { display: flex; flex-direction: row; font-size: 90%; }
#footer p { text-align: center; }
.container {
  display: flex;
  flex-direction: column;
  min-height: 100vh; /* Full viewport height */
}
.spacer { flex-grow: 1; }
@media print {
    @page { margin: 0; }
    body * {
        visibility: hidden;
    }
    #printarea, #printarea * { visibility: visible; }
    #printarea {
        /* position of an element relative to its parent */
        position: absolute;
        left: 0;
        top: 0;
    }
}
.outer-table {
    table-layout: fixed;
}
.outer-table > tbody > tr > td {
    overflow: hidden;
}
</style>
<script>
// Run this file from a local dev server for testing: 'python -m http.server 5500'
// need a CORS proxy: https://pypi.org/project/jupyterlite-simple-cors-proxy/
var baseUrl = "{{proxyURL}}";
var rpcURL = baseUrl+'/openbis/openbis/rmi-application-server-v3.json';
// Using the openBIS JSON-RPC API directly
// https://unlimited.ethz.ch/spaces/openBISDoc2010/pages/53745963/Using+the+openBIS+JSON-RPC+API+directly#UsingtheopenBISJSONRPCAPIdirectly-openBISendpoints
// and:
// https://openbis.ch/javadoc/20.10.x/javadoc-api-v3/ch/ethz/sis/openbis/generic/asapi/v3/IApplicationServerApi.html

var token = "";
function isObject(variable) {
  return typeof variable === 'object' && variable !== null && !Array.isArray(variable);
}
function error(msg) {
    console.error('Error: '+msg);
    $("p.error-text").html('Error: '+msg);
    $("p.error-text").show();
}
function rpcQuery(method, params, successHandler, errorHandler=()=>{}) {
    const data = {
        "method": method,
        "params": params,
        "jsonrpc": "2.0", "id": 1
    };
    $.post(rpcURL, JSON.stringify(data), function(responseStr) {
        // console.log("response: ", responseStr, typeof responseStr);
        let response = responseStr;
        if (!isObject(response)) {
            response = JSON.parse(responseStr);
        }
        var errmsg;
        if (response.error !== undefined) {
            errmsg = response.error.message;
        } else if (response.result === null ) {
            errmsg = "No such user or wrong password!"
        }
        //console.log("test:", errmsg)
        if (errmsg !== undefined) {
            error(errmsg);
            errorHandler(errmsg);
        } else {
            successHandler(response.result);
        }
    });
}
function getCookieValue(name) {
    const cookies = document.cookie.split(';');
    for (let cookie of cookies) {
        const [cookieName, cookieValue] = cookie.trim().split('=');
        if (cookieName === name) {
            return decodeURIComponent(cookieValue);
        }
    }
    return null; // Cookie not found
}
function dsLogin() {
    $("p.error-text").hide();
    rpcQuery("login", [ $('#username').val(), $('#password').val() ],
        function(data) {
            token = data;
            console.log("Got token: ", token);
            sessionStorage.setItem('dsToken', token);
            checkAuth();
        }, function(errmsg) {
            error("Sorry: "+errmsg);
        }
    );
}
function dsLogout() {
    console.log("dsLogout, token: ", token);
    rpcQuery("logout", [ token ], function(data){
        token = "";
        console.log("Logged out successfully!");
    });
    console.log("dsLogout, here!");
    sessionStorage.removeItem('dsToken');
}
function checkAuth() {
    if (token.length <= 0) {
        // Retrieve the token
        var oldtoken = sessionStorage.getItem('dsToken') || "";
        if (oldtoken.length <= 0) { // try to read from cookies
            oldtoken = getCookieValue('openbis') || "";
            console.log("Got cookie: "+oldtoken);
        }
        if (oldtoken.length > 0) { // was an existing token found?
            token = oldtoken;
            console.log("Restored token!");
        } else { // need to login first
            $("#username").focus();
            $("#login-form-div").show();
            $('#main').hide();
        }
    }
    console.log("checkAuth, token: ", token);
    if (token.length > 0) { // we have a token
        $("#login-form-div").hide();
        $('#main').show();
    }
}
function pad(number, length = 2) {
    return number.toString().padStart(length, '0');
}
function splitStr(str, sep=/\s+/) {
    return str.trim().split(sep).filter(word => word !== '');
}
function formatDate(milliseconds, format) {
    const date = new Date((+milliseconds));
    const map = {
        'DD': pad(date.getDate()),
        'D': date.getDate(),
        'MM': pad(date.getMonth() + 1),
        'M': date.getMonth() + 1,
        'YYYY': date.getFullYear(),
        'YY': date.getFullYear().toString().slice(-2),
        'HH': pad(date.getHours()),
        'H': date.getHours(),
        'mm': pad(date.getMinutes()),
        'm': date.getMinutes(),
        'ss': pad(date.getSeconds()),
        's': date.getSeconds()
    };
    return format.replace(/DD|D|MM|M|YYYY|YY|HH|H|mm|m|ss|s/g, matched => map[matched]);
}
function formatString(str, map) {
    return str.replace(/{([^}]+)}/g, (match, index) => {
        index = splitStr(index, /:/);
        var value = typeof map[index[0]] !== 'undefined' ? map[index[0]] : match;
        // console.log("index: ", index, "value: ", value);
        if (index.length > 1) {
            const fmt = index.slice(1).join(":")
            value = formatDate(value, fmt)
            // console.log("new value: ", value, "fmt: ", fmt);
        }
        return value;
    });
}
function showCellBorders() {
    $(".outer-table").css({"border": "2px solid black"});
    $(".outer-table > tbody > tr > td").css({"border": "1px dotted gray"});
    $(".outer-table table").css({"border": "1px solid black"});
}
const cellLayout = `
<table>
<tr><td>{code}</td><td rowspan="4"><div id="{qrId}"\></div></td></tr>
<tr><td>{$NAME}</td></tr>
<tr><td>{permId}</td></tr>
<tr><td>{modificationDate:DD.MM.YYYY HH:mm:ss}</td></tr>
</table>
`;
pageSizeMM = {"width": 210, "height": 297}
labelSizeMM = {"width": 45.72, "height": 21.16,
               "spacingV": 0, "spacingH": 2.54,
               "posTop": 21.54, "posLeft": 9.75}
grid = {"columns": 4, "rows": 12, "skip": 3}
function resize(qrIds) {
}
function entriesFiltered(obj) {
    return Object.entries(obj).filter(([key, value]) =>
        !key.startsWith('@') && (typeof value !== 'object' || value === null)
    );
}
function makeCells(index, samplesRequested, data, qrList, errmsg, $tableRow)
{
    var cellHtml = ""
    if (samplesRequested.length > index && index >= 0) {
        const id = samplesRequested[index];
        // console.log(id, JSON.stringify(data[id], null, 2));
        if (undefined === data[id]) {
            errmsg.push("ID not found: "+id);
            error(errmsg.join("<br>\n"));
            console.log("skipping");
            return; // skip this one
        }
        // filter relevant properties and flatten nested arrays
        props = Object.fromEntries([...entriesFiltered(data[id]),
            ...entriesFiltered(data[id].properties), ...entriesFiltered(data[id].identifier),
            ...entriesFiltered(data[id].permId), ["qrId", "qrcode_"+index],
        ]);
        qrList.push([props.qrId, props.permId]);
        console.log("flattened: " + JSON.stringify(props, null, 2));
        cellHtml = formatString(cellLayout, props);
    }
    const $cell = $('<td></td>').html(cellHtml);
    $tableRow.append($cell);
}
function mm(val) { return val+"mm"; }
function px2mm(px) {
    if (typeof px !== "number" ) px = parseFloat(px);
    return px * 25.4 / 96;
}
function makeOuterTable(samplesRequested, pageIdx, data)
{
    console.log(JSON.stringify(data, null, 2));
    const $table = $('<table class="outer-table"></table>');
    var qrList = [];
    var errmsg = [];
    // generate a grid/table of labels
    for (let r = 0; r < grid.rows; r++) {
        const $row = $('<tr></tr>');
        for (let c = 0; c < grid.columns; c++) {
            const index = (pageIdx*grid.rows*grid.columns
                            + r * grid.columns + c - grid.skip);
            makeCells(index, samplesRequested, data, qrList, errmsg, $row);
        }
        $table.append($row);
    }
    $("#printarea").append($table);
    // make QR codes
    qrCodes = {};
    qrList.forEach(pair => {
        const [qrId, qrData] = pair;
        qrCodes[qrId] = new QRCode(document.getElementById(qrId), {
            text: qrData,
            width: 128,
            height: 128,
            colorDark: "#000000",
            colorLight: "#ffffff",
            correctLevel: QRCode.CorrectLevel.M
        });
    });
    // resize(qrList.map(pair => pair[0]));
    // adjust qr code size
    qrList.forEach(([id, text]) => {
        $("img", "#"+id).css("max-height", "100%").css("max-width", "100%");
    });
    $(".outer-table > tbody > tr > td").css({
        "height": mm(labelSizeMM.height),
        "width": mm(labelSizeMM.width),
        "padding-left": mm(labelSizeMM.spacingH/2),
        "padding-right": mm(labelSizeMM.spacingH/2)});
    const layoutWidthMM = grid.columns*(labelSizeMM.width+labelSizeMM.spacingH)-labelSizeMM.spacingH;
    const tablePaddingWidthMM = (pageSizeMM.width - layoutWidthMM);
    console.log("page width (mm)", pageSizeMM.width,
                "layout with (mm):", layoutWidthMM,
                "delta:", tablePaddingWidthMM)
    $table.css({"padding-left": mm(labelSizeMM.posLeft),
                "padding-right": mm(tablePaddingWidthMM-labelSizeMM.posLeft)});
    const layoutHeightMM = grid.rows*(labelSizeMM.height+labelSizeMM.spacingV)-labelSizeMM.spacingV;
    const tablePaddingHeightMM = (pageSizeMM.height - layoutHeightMM);
    console.log("page height (mm)", pageSizeMM.height,
                "layout height (mm):", layoutHeightMM,
                "delta:", tablePaddingHeightMM)
    $table.css({"padding-top": mm(labelSizeMM.posTop)}); // don't set bottom to avoid page breaks
                //"padding-bottom": mm(tablePaddingHeightMM-labelSizeMM.posTop)
    // adjust font size to reach desired label height
    var fontsizeCurrent = $("#printarea").css('font-size');
    const labelHeightMM = px2mm($(".outer-table table").css("height"));
    console.log("current label height (mm):", labelHeightMM);
    if (labelHeightMM > labelSizeMM.height) {
        const fontRatio = 100*labelSizeMM.height/labelHeightMM;
        console.log("Adjusting label font size by", fontRatio, "%");
        $table.css("font-size", fontRatio+"%")
    }
    console.log("Final label size (mm):",
        px2mm($(".outer-table table").css("width")),
        px2mm($(".outer-table table").css("height")));
    showCellBorders();
}
function makeTables(samplesRequested, data)
{
    $("#printarea table").remove();
    const entriesPerPage = grid.columns*grid.rows;
    const pageCount = Math.ceil((samplesRequested.length+grid.skip)/entriesPerPage);
    for (let p = 0; p < pageCount; p++) {
        makeOuterTable(samplesRequested, p, data);
    }
}
function getSamples() {
    // get sample ids from input text area
    var sampleIds = $("#inputfield").val();
    sampleIds = splitStr(sampleIds);
    console.log("sampleIds:", sampleIds);
    // prepare query
    var sampleList = [];
    sampleIds.forEach(function(id) {
        sampleList.push({
            "identifier": id,
            "@type": "as.dto.sample.id.SampleIdentifier"
        });
    });
    fetchOptions = {
        "properties": {
            "@type": "as.dto.property.fetchoptions.PropertyFetchOptions"
        },
    };
    rpcQuery("getSamples", [ token, sampleList, fetchOptions ], function(data) {
        makeTables(sampleIds, data);
    });
}

$(document).ready(function() {
    $('#login-form').submit(function() {
        dsLogin();
    });
    $('#logout-button').click(function() {
        dsLogout();
        window.location.reload();
    });
    $('#query-button').click(function() {
        $("p.error-text").hide();
        getSamples();
    });
    $('#devtest-button').click(function() {
        const objectType = 'EXPERIMENTAL_STEP';
        const objectName = 'Label format';
        fetchOptions = {
            "@type": "as.dto.global.fetchoptions.GlobalSearchObjectFetchOptions",
            sample: {
                "@type": "as.dto.sample.fetchoptions.SampleFetchOptions",
                type: {
                    "@type": "as.dto.sample.fetchoptions.SampleTypeFetchOptions",
                }
            },
            properties: {
                "@type": "as.dto.property.fetchoptions.PropertyFetchOptions",
            },
        };
        searchCriteria = {
            "@type": "as.dto.global.search.GlobalSearchCriteria",
            // objectKind: {
            //     "@type": "as.dto.global.search.GlobalSearchObjectKindCriteria",
            //     value: "SAMPLE",
            // },
            // text: {
            //     "@type": "as.dto.global.search.GlobalSearchTextCriteria",
            //     contains: "Label",
            // },
        };
        fetchOptions2 = {
            "@type": "as.dto.sample.fetchoptions.SampleFetchOptions",
            type: {
                "@type": "as.dto.sample.fetchoptions.SampleTypeFetchOptions",
            },
            properties: {
                "@type": "as.dto.property.fetchoptions.PropertyFetchOptions",
            },
        };
        searchCriteria2 = {
            "@type": "as.dto.sample.search.SampleSearchCriteria",
            "criteria": [
                    {
                    "fieldName": "code",
                    "fieldType": "ATTRIBUTE",
                    "fieldValue": {
                        "value": "EXP",
                        "@type": "as.dto.common.search.StringStartsWithValue"
                    },
                    "useWildcards": false,
                    "@type": "as.dto.common.search.CodeSearchCriteria"
                    },
                    {
                    "fieldName": "$NAME",
                    "fieldType": "PROPERTY",
                    "fieldValue": {
                        "value": "Label",
                        "@type": "as.dto.common.search.StringStartsWithValue"
                    },
                    "useWildcards": false,
                    "@type": "as.dto.common.search.StringPropertySearchCriteria"
                    },
            ],
            "relation": "SAMPLE",
            "operator": "AND",
            // type: {
            //     "@type": "as.dto.sample.search.SampleTypeSearchCriteria",
            //     value: "EXPERIMENTAL_STEP.MEASUREMENT_SESSION",
            // },
            // text: {
            //     "@type": "as.dto.global.search.GlobalSearchTextCriteria",
            //     contains: "Label",
            // },
        };
        rpcQuery("searchSamples", [ token, searchCriteria2, fetchOptions2 ],
        function(result) {
            console.log(`result: '${result}'`);
            console.dir(result);
            if (result.objects) {
                // Process the results
                result.objects.forEach(object => {
                    console.dir(obj);
                    // console.log(`Object ID: ${object.id}, Name: ${object.name}`);
                });
            } else {
                console.error('No results found or error in response:', result);
            }
        });
    });
    checkAuth();
});
</script>
</head>
<body>
<div class="container">
<div id="intro">
<img src="data:image/png;base64,{{logoBase64}}" alt="DataStore Logo"/>
<h1>{{siteTitle}} {{appTitle}}</h1>
<p>
This web interface generates QR labels for samples from the <a href="{{siteURL}}">{{siteTitle}}</a>. The idea is to allow for customized label layouts and printing them by the regular printing dialog of the web-browser. This app could be an extension of the {{siteTitle}} but as long as is runs separately an additional log-in is required since the authentication token can not be reused.
<ol>
  <li>Log-in with your regular {{siteTitle}} credentials.</li>
  <li>Use the global search to find the desired samples or objects, tick their checkboxes and click <i>COPY IDENTIFIERS</i>.
  <li>Paste this list of space-separated identifiers in the text field below, such as
  <pre>/INSTRUMENTS/INSTRUMENTS_TYPE_X/INS7 /USERNAME/MY_PROJECT/SAM6 /MATERIALS/PROJECT_WITH_SAMPLES/SAM3</pre></li>
  <li>Hit <i>Generate</i> to create a set of labels for printing.</li>
  <li>Print the page: <i>Menu -> Print</i> or by pressing <i>Ctrl-P</i>.</li>
</ol>
</p>
</div>
<div id="login-form-div">
<form id="login-form" action="javascript:">
<input id="username" type="text">
<input id="password" type="password">
<button id="login-button">Login</button>
</form>
</div>
<p class="error-text"></p>

<div id="main">
<textarea id="inputfield" tabindex="1"></textarea>
<div id="button-group">
    <button id="logout-button" tabindex="3">Logout</button>
    <span class="spacer"></span>
    <button id="query-button" tabindex="2">Generate</button>
    <span class="spacer"></span>
    <button id="devtest-button" tabindex="4">DevTest</button>
</div>
</div>
<div id="printarea"></div>

<div class="spacer"></div>
<div id="footer">
<div class="spacer"></div>
<p>{{gitinfo}}<br>
Using server: <a href="{{siteURL}}">{{siteURL}}</a>
</p>
<div class="spacer"></div>
</div>
</div><!-- container -->
</body>
</html>
