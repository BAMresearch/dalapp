<!DOCTYPE html><html><head>
<title>{{siteTitle}} {{appTitle}}</title>
<script type="text/javascript" src="{{proxyURL}}/openbis/webapp/eln-lims/lib/jquery/js/jquery-1.11.3.min.js"></script>
<!-- https://github.com/davidshimjs/qrcodejs -->
<script>{{qrcode}}</script>
<style>
html, body { height: 100%; }
body { background-color: #f2f2f2; }
#intro img { float: right; height: 80px; margin: 10px; }
#main { display: none; width: 50%; }
#main textarea { overflow-y: scroll; width: 100%; min-height: 6em; }
p.error-text { color: red; display: none; }
a { text-decoration: none; color: darkblue; }
#button-group {
    margin: 10px 0;
    display: flex;
    flex-direction: row;
    min-width: 100%;}
#button-group .spacer { flex-grow: 1; }
#footer p { justify-self: center; }
.container {
  display: flex;
  flex-direction: column;
  min-height: 100vh; /* Full viewport height */
}
.spacer { flex-grow: 1; }
@media print {
    body * {
        visibility: hidden;
    }
    #printarea, #printarea * {
        visibility: visible;
    }
    #printarea {
        /* position of an element relative to its parent */
        position: absolute;
        left: 0;
        top: 0;
    }
}
</style>
<script>
// Run this file from a local dev server for testing: 'python -m http.server 5500'
// need a CORS proxy: https://pypi.org/project/jupyterlite-simple-cors-proxy/
var baseUrl = "{{proxyURL}}";
var rpcURL = baseUrl+'/openbis/openbis/rmi-application-server-v3.json';
// Using the openBIS JSON-RPC API directly
// https://unlimited.ethz.ch/spaces/openBISDoc2010/pages/53745963/Using+the+openBIS+JSON-RPC+API+directly#UsingtheopenBISJSONRPCAPIdirectly-openBISendpoints

var token = "";
function isObject(variable) {
  return typeof variable === 'object' && variable !== null && !Array.isArray(variable);
}
function rpcQuery(method, params, successHandler, errorHandler=()=>{}) {
    const data = {
        "method": method,
        "params": params,
        "jsonrpc": "2.0", "id": 1
    };
    $.post(rpcURL, JSON.stringify(data), function(responseStr) {
        console.log("response: ", responseStr, typeof responseStr);
        let response = responseStr;
        if (!isObject(response)) {
            response = JSON.parse(responseStr);
        }
        var errmsg;
        if (response.error !== undefined) {
            errmsg = response.error.message;
        } else if (response.result === null ) {
            errmsg = "No such user or wrong password!"
        }
        //console.log("test:", errmsg)
        if (errmsg !== undefined) {
            console.error('Error:', errmsg);
            errorHandler(errmsg);
        } else {
            successHandler(response.result);
        }
    });
}
function getCookieValue(name) {
    const cookies = document.cookie.split(';');
    for (let cookie of cookies) {
        const [cookieName, cookieValue] = cookie.trim().split('=');
        if (cookieName === name) {
            return decodeURIComponent(cookieValue);
        }
    }
    return null; // Cookie not found
}
function error(msg) {
    $("p.error-text").html(msg);
    $("p.error-text").show();
}
function dsLogin() {
    $("p.error-text").hide();
    rpcQuery("login", [ $('#username').val(), $('#password').val() ],
        function(data) {
            token = data;
            console.log("Got token: ", token);
            sessionStorage.setItem('dsToken', token);
            checkAuth();
        }, function(errmsg) {
            error("Sorry: "+errmsg);
        }
    );
}
function dsLogout() {
    console.log("dsLogout, token: ", token);
    rpcQuery("logout", [ token ], function(data){
        token = "";
        console.log("Logged out successfully!");
    });
    console.log("dsLogout, here!");
    sessionStorage.removeItem('dsToken');
}
function checkAuth() {
    if (token.length <= 0) {
        // Retrieve the token
        var oldtoken = sessionStorage.getItem('dsToken') || "";
        if (oldtoken.length <= 0) { // try to read from cookies
            oldtoken = getCookieValue('openbis');
            console.log("Got cookie: "+oldtoken);
        }
        if (oldtoken.length > 0) { // was an existing token found?
            token = oldtoken;
            console.log("Restored token!");
        } else { // need to login first
            $("#username").focus();
            $("#login-form-div").show();
            $('#main').hide();
        }
    }
    console.log("checkAuth, token: ", token);
    if (token.length > 0) {// we have a token
        $("#login-form-div").hide();
        $('#main').show();
    }
}
// /IBRESSLE/MY_PROJECT/SAM3   /IBRESSLE/MY_PROJECT/SAM5
// /INSTRUMENTS/INSTRUMENTS_TYPE_X/INS7 /IBRESSLE/MY_PROJECT/SAM6 /IBRESSLE/MY_PROJECT/SAM5 /MATERIALS/PROJECT_WITH_SAMPLES/SAM3
function getSamples() {
    // get sample ids from input text area
    var sampleIds = $("#inputfield").val();
    sampleIds = sampleIds.trim().split(/\s+/).filter(word => word !== '');
    console.log("sampleIds:", sampleIds);
    // prepare query
    var sampleList = [];
    sampleIds.forEach(function(id) {
        sampleList.push({
            "identifier": id,
            "@type": "as.dto.sample.id.SampleIdentifier"
        });
    });
    fetchOptions = {
        "properties": {
            "@type": "as.dto.property.fetchoptions.PropertyFetchOptions"
        },
    };
    // console.log("sampleList:", sampleList);
    rpcQuery("getSamples", [ token, sampleList, fetchOptions ], function(data){
        console.log("Got data: " + JSON.stringify(data));
        $("#printarea table").remove();
        var table = "<table>";
        var qrList = [];
        var errmsg = "";
        sampleIds.forEach(function(id) {
            if (undefined === data[id]) {
                errmsg += "ID not found: "+id+"<br>\n";
                error(errmsg);
                console.log("skipping");
                return; // skip this one
            }
            const fields = [data[id].code, data[id].properties['$NAME'], data[id].properties.BAM_OE, id, data[id].permId.permId];
            console.log(fields);
            table += "<tr>";
            for (const field of fields) {
                table += "<td>"+field+"</td>";
            }
            var qrId = "qrcode_"+data[id].code;
            table += "<td><div id=\""+qrId+"\"\></div></td>";
            qrList.push([qrId, data[id].permId.permId]);
            table += "</tr>";
        });
        table += "</table>";
        $("#printarea").append(table);
        // make QR codes
        qrCodes = {};
        qrList.forEach(pair => {
            const [qrId, qrData] = pair;
            qrCodes[qrId] = new QRCode(document.getElementById(qrId), {
                text: qrData,
                width: 128,
                height: 128,
                colorDark: "#000000",
                colorLight: "#ffffff",
                correctLevel: QRCode.CorrectLevel.H
            });
        });
    });
}

$(document).ready(function() {
    $('#login-form').submit(function() {
        dsLogin();
    });
    $('#logout-button').click(function() {
        dsLogout();
        window.location.reload();
    });
    $('#query-button').click(function() {
        getSamples();
    });
    checkAuth();
});
</script>
</head>
<body>
<div class="container">
<div id="intro">
<img src="data:image/png;base64,{{logoBase64}}" alt="DataStore Logo"/>
<h1>{{siteTitle}} {{appTitle}}</h1>
<p>
This web interface generates QR labels for samples from the <a href="{{siteURL}}">{{siteTitle}}</a>. The idea is to allow for customized label layouts and printing them by the regular printing dialog of the web-browser. This app could be an extension of the {{siteTitle}} but as long as is runs separately an additional log-in is required since the authentication token can not be reused.
<ol>
  <li>Log-in with your regular {{siteTitle}} credentials.</li>
  <li>Use the global search to find the desired samples or objects, tick their checkboxes and click <i>COPY IDENTIFIERS</i>.
  <li>Paste this list of space-separated identifiers in the text field below, such as
  <pre>/INSTRUMENTS/INSTRUMENTS_TYPE_X/INS7 /USERNAME/MY_PROJECT/SAM6 /MATERIALS/PROJECT_WITH_SAMPLES/SAM3</pre></li>
  <li>Hit <i>Generate</i> to create a set of labels for printing.</li>
  <li>Print the page: <i>Menu -> Print</i> or by pressing <i>Ctrl-P</i>.</li>
</ol>
</p>
</div>
<div id="login-form-div">
<form id="login-form" action="javascript:">
<input id="username" type="text">
<input id="password" type="password">
<button id="login-button">Login</button>
</form>
</div>
<p class="error-text"></p>

<div id="main">
<textarea id="inputfield"></textarea>
<div id="button-group">
    <button id="logout-button">Logout</button>
    <span class="spacer"></span>
    <button id="query-button">Generate</button>
</div>
</div>
<div id="printarea"></div>

<div class="spacer"></div>
<div id="footer">
<p>Using server: <a href="{{siteURL}}">{{siteURL}}</a></p>
</div>
</div><!-- container -->
</body>
</html>
